name: online-experiments

# env:
#   name: staging_environment

# concurrency: staging_environment

on:
  push:
    paths:
      - "**/online-experiments.yml"
    branches: [main]
#
jobs:
  build-1:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    outputs:
      output1: ${{ steps.vars.outputs.tag-name }}
      output2: ${{ steps.vars.outputs.isRunAppium }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]
        node-version: [16]
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST_EMAIL_DOMAIN: ${{ secrets.TEST_EMAIL_DOMAIN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: Get short SHA üîë
        id: slug
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
        shell: bash

      - name: Checkout ${{ steps.slug.outputs.sha7 }} ‚¨áÔ∏è
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }} üìÆ
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"

      - name: Get all Commit
        run: |
          git fetch --prune --unshallow
          export COMMIT_HEAD=$(git log -1 --pretty=%B | perl -wnE'say for /^\w+/gm')
          if [[ "$COMMIT_HEAD" = "Merge" ]] ; \
          then export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only -2) ; \
          else export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only) ; \
          fi
          echo "MODIFIED_FILE_LIST<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FILE_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Check commit date
        id: vars
        run: |
          TZ=UTC-8 git log -10 --date=format-local:"%Y%m%d%H%M" --format="%cd"
          echo "--------------------------"
          echo "::set-output name=tag-name::0.1.0-nightly-202204151014"
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then echo "::set-output name=isRunAppium::1" ; \
          else echo "::set-output name=isRunAppium::0" ; \
          fi
        shell: bash

      - name: Check ${{ steps.vars.outputs.tag-name }}
        id: check
        run: |
          echo "${{ steps.vars.outputs.tag-name }}"
          echo "isRunAppium: ${{ steps.vars.outputs.isRunAppium }}"
        shell: bash

      - name: Install dependencies üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: Install UnPackaged üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn unpackaged
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: E2E Test üß™
        if: "!contains(github.event.head_commit.message, 'skip e2e')"
        run: yarn test:e2e:ci
        shell: bash

      - name: Upload Test Results üóÉ
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-output"
          path: test/output/**

  appium-test:
    needs: build-1
    if: |
      (contains(github.event_name, 'schedule') || contains(needs.build-1.outputs.output2, '0'))
        && !contains(github.event.head_commit.message, 'skip e2e')
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        test: [1, 2]
        node-version: [14]
        os: [windows-2022]
        include:
          - test: 1
            os: windows-2022
          - test: 2
            os: windows-2022
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: test Get short SHA üîë
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
          echo "test-1"
          echo "isRunAppium: ${{needs.build-1.outputs.output2}}"
        shell: bash

      - name: Checkout ‚¨áÔ∏è
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }} üìÆ
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}

      - name: update node-gyp on windows to support Visual Studio 2019
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          npm install --global node-gyp@8.4.1
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}

      - name: Get message
        run: |
          git fetch --prune --unshallow
        shell: bash

      - name: Install dependencies üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn

      - name: Install Alphabiz
        run: |
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{needs.build-1.outputs.output1}}/alphabiz-${{needs.build-1.outputs.output1}}-windows.7z > alphabiz.7z
          7z x alphabiz.7z
        shell: bash

      - name: Install winappdriver.msi
        run: |
          Invoke-WebRequest "https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi" -OutFIle "C:\WindowsApplicationDriver_1.2.1.msi"
          Start-Process msiexec -ArgumentList "/quiet","/x","{087BBF93-D9E3-4D27-BDBE-9C702E0066FC}" -Verb runAs -Wait
          Start-Process msiexec -ArgumentList "/quiet","/i","C:\WindowsApplicationDriver_1.2.1.msi" -Verb runAs -Wait
          Start-Sleep -s 5
        shell: powershell

      - name: Run appium
        run: |
          Start-Process PowerShell -ArgumentList "yarn test:appium"
          Start-Sleep -s 10

      - name: e2e appium creditDownload test for 7z üß™
        if: matrix.test == '1'
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            yarn test:release:creditsDownload

      - name: e2e appium creditUpload test for 7z üß™
        if: matrix.test == '2'
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            yarn test:release:creditsUpload

      - name: Download msi and exe
        run: |
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{needs.build-1.outputs.output1}}/alphabiz-${{needs.build-1.outputs.output1}}.exe > C:/alphabiz.exe
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{needs.build-1.outputs.output1}}/alphabiz-${{needs.build-1.outputs.output1}}.msi > C:/alphabiz.msi
        shell: bash

      - name: Install alphabiz.msi
        run: |
          Start-Process msiexec -ArgumentList "/quiet","/i","C:\alphabiz.msi"
        shell: powershell

      - name: Install alphabiz.exe
        run: |
          Start-Process -FilePath "C:\alphabiz.exe" -Verb runAs -ArgumentList '/s','/v"/qn"'
          Start-Sleep -s 30
        shell: powershell

      - name: e2e appium test for msi üß™
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            export APP_TYPE=msi
            yarn test:release
            unset APP_TYPE

      - name: e2e appium test for exe üß™
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            export APP_TYPE=exe
            yarn test:release
            unset APP_TYPE

      - name: Upload Test Results üóÉ
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "appium-test-${{ matrix.test }}-output"
          path: test/output/**
