name: CI/CT/CD
# env:
#   name: staging_environment

# concurrency: staging_environment

on:
  schedule:
    - cron: "30 11 * * *"
  pull_request:
  push:
    paths:
      - "**.js"
      - "**/push.yml"
      - "!patches/**"
      - "!public/**"
      - "!wix/**"
      - "!test/**"
      - "build/**"
      - "release.json"
    branches: [main]

jobs:
  nightly_job:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message , 'skip workflow')"
    outputs:
      output1: ${{ steps.unify.outputs.tag-name }}
      output2: ${{ steps.check.outputs.isRunAppium }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [16]
        include:
          - os: windows-latest
            node-version: 16
      fail-fast: false
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST_EMAIL_DOMAIN: ${{ secrets.TEST_EMAIL_DOMAIN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: Get short SHA üîë
        id: slug
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
        shell: bash

      - name: Checkout ${{ steps.slug.outputs.sha7 }} ‚¨áÔ∏è
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }} üìÆ
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"

      - name: Get message
        id: vars
        run: |
          git fetch --prune --unshallow
          echo "::set-output name=date::$(TZ=UTC-8 git log -1 --date=format-local:"%Y%m%d%H%M" --format="%cd")"
          echo "::set-output name=event-name::${{ github.event_name }}"
          echo "::set-output name=download-tag::$(git describe --tags --abbrev=0)"
          if [[ ${{ matrix.os }} = "ubuntu-latest" ]] ; \
          then echo "::set-output name=system::ubuntu" ; \
               echo "::set-output name=package::Alphabiz-linux-x64" ; \
          elif [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then echo "::set-output name=system::macos" ; \
               echo "::set-output name=package::Alphabiz-darwin-x64" ; \
          elif [[ ${{ matrix.os }} = "windows-latest" ]] ; \
          then echo "::set-output name=system::windows" ; \
               echo "::set-output name=package::Alphabiz-win32-x64" ; \
          fi
          export COMMIT_HEAD=$(git log -1 --pretty=%B | perl -wnE'say for /^\w+/gm')
          if [[ "$COMMIT_HEAD" = "Merge" ]] ; \
          then export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only -2) ; \
          else export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only) ; \
          fi
          echo "MODIFIED_FILE_LIST<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FILE_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      # because json file Multiline
      # need convert to a single line,then get property use fromJson().property
      - name: Get release.json property
        id: release
        if: contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          content=`cat ./release.json`
          content="${content//'%'/'%25'}"
          if [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then content="${content//$'\n'/%0A}" ; \
          else content="${content//$'\n'/'%0A'}" ; \
          fi
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=releaseJson::$content"
        shell: bash

      - name: Get package.json version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "package.json"
          prop_path: "version"

      - name: Checkout release.json target tag
        id: checkout
        if: contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          git checkout ${{ fromJson(steps.release.outputs.releaseJson).targetTagName }}
          git show --name-only
          echo "--------------------------"
          echo "::set-output name=target-tag-name::${{ fromJson(steps.release.outputs.releaseJson).targetTagName }}"
          echo "::set-output name=new-tag-name::${{ fromJson(steps.release.outputs.releaseJson).newTagName }}"
        shell: bash

      - name: Get unpackaged/version.json property
        id: unpackaged
        run: |
          content=`cat ./build/electron/UnPackaged/version.json`
          content="${content//'%'/'%25'}"
          if [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then content="${content//$'\n'/%0A}" ; \
          else content="${content//$'\n'/'%0A'}" ; \
          fi
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=versionJson::$content"
        shell: bash

      - name: Checkout unpackaged/version.json
        id: versionJson
        run: |
          echo "::set-output name=package-version::${{ fromJson(steps.unpackaged.outputs.versionJson).packageVer }}"

      # stable version x.y.z+1
      - name: Get UnstableVersion
        id: unstable
        run: |
          echo "::set-output name=unstable-version::$(echo ${{ steps.versionJson.outputs.package-version }} | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{$NF=sprintf("%0*d", length($NF), ($NF+1)); print}')"
        shell: bash

      # after git checkout
      - name: Get last commit date \ today all commit message
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        id: nightly
        run: |
          echo "::set-output name=commit-sha7::$(git log -1 --pretty=%B --author="Alphabiz-Team" | perl -wnE'say for /(?<=-)\w{7}(?=\s)|^\w{7}(?=\s)/g')"
          export DESCRIBE=$(cat github-describe/github-describe.txt)
          echo "$DESCRIBE"
          echo "DESCRIBE<<EOF" >> $GITHUB_ENV
          echo "$DESCRIBE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      # This step for unify the tag name
      # nightly-release use tag_name: $packageJsonVersion-internal/nightly-$dateTime-$commitId
      # official-release use tag_name: ./release.json property newTagName
      - name: Unified Tag format
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        id: unify
        run: |
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then echo "::set-output name=tag-name::${{ steps.checkout.outputs.new-tag-name }}" ; \
               if ${{ contains(steps.checkout.outputs.new-tag-name, 'nightly') }} ; \
               then echo "::set-output name=release-name::$(echo '${{ steps.checkout.outputs.new-tag-name }}' | perl -wnE'say for /^\d+\.\d+\.\d+\-?\w*/g' )-${{ steps.nightly.outputs.commit-sha7 }}" ; \
               else echo "::set-output name=release-name::${{ steps.checkout.outputs.new-tag-name }}" ; \
               fi
               echo "::set-output name=package-name::${{ steps.checkout.outputs.new-tag-name }}" ; \
          else echo "::set-output name=tag-name::${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}" ; \
               echo "::set-output name=release-name::${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.nightly.outputs.commit-sha7 }}" ;  \
               echo "::set-output name=package-name::${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}" ; \
          fi
        shell: bash

      # this step checkout all output
      - name: Checkout vars-date ${{ steps.vars.outputs.date }} ‚¨áÔ∏è
        id: check
        run: |
          echo "event_name: ${{ steps.vars.outputs.event-name }}"
          echo "event.head_commit.message: ${{ github.event.head_commit.message }}"
          echo "system: ${{ steps.vars.outputs.system }}"
          echo "download-tag: ${{ steps.vars.outputs.download-tag }}"
          echo "package: ${{ steps.vars.outputs.package }}"
          echo "run workflow date: ${{ steps.vars.outputs.date }}"
          echo "package.json version: ${{ steps.version.outputs.prop }}"
          echo "unpackage.version: ${{ steps.versionJson.outputs.package-version }}"
          echo "unstable-version: ${{ steps.unstable.outputs.unstable-version }}"
          echo "----------------------"
          echo "MODIFIED_FILE_LIST: ${{ env.MODIFIED_FILE_LIST }}"
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then echo "::set-output name=isRunAppium::1" ; \
          else echo "::set-output name=isRunAppium::0" ; \
          fi
          if ${{ contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json') }};\
          then  echo "----------------------" ; \
                echo "tag-name: ${{ steps.unify.outputs.tag-name }}" ; \
                echo "release-name: ${{ steps.unify.outputs.release-name }}" ; \
                echo "package-name: ${{ steps.unify.outputs.package-name }}" ; \
                echo "----------------------" ; \
                echo "commit-sha7: ${{ steps.nightly.outputs.commit-sha7 }}" ; \
                echo "----------------------" ; \
                echo "target-tag-name: ${{ steps.checkout.outputs.target-tag-name }}" ; \
                echo "new-tag-name: ${{ steps.checkout.outputs.new-tag-name }}" ; \
          fi
        shell: bash
      
      - name: Install dependencies üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: Install UnPackaged üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn unpackaged
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: E2E Test for Electron üß™
        if: "!contains(github.event.head_commit.message, 'skip e2e')"
        run: |
          export REPO=alphabiz
          yarn test:e2e:electron
          unset REPO
        shell: bash

      - name: E2E Test üß™
        if: |
          matrix.os != 'windows-latest' && !contains(github.event.head_commit.message, 'skip e2e')
        run: yarn test:e2e:ci

      - name: Upload Test Results üóÉ
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-output"
          path: test/output/**

      #ÂêéÈù¢ÁöÑstepÊôö‰∏äËøêË°å Êàñ Ê≠£ÂºèÂèëÂ∏É
      - name: add list
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          curl \
          -H 'Authorization: token ${{ secrets.PAT }}' \
          -H 'Accept: application/vnd.github.v3.raw' \
          -L 'https://api.github.com/repos/tanshuai/alphabiz-app/contents/test-secret/recommends.txt' > build/electron/UnPackaged/recommends.txt
        shell: bash

      - name: Run electron-packager
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then if ${{ contains(steps.checkout.outputs.new-tag-name, 'nightly') }} ; \
               then yarn node update-version.js --newTag ${{ steps.unify.outputs.tag-name }} --SHA7 ${{ steps.slug.outputs.sha7 }} --buildTime ${{ steps.vars.outputs.date }} ; \
               else yarn node update-version.js --newTag ${{ steps.unify.outputs.tag-name }} --SHA7 ${{ steps.slug.outputs.sha7 }} --buildTime ${{ steps.vars.outputs.date }} --stable; \
               fi
          else yarn node update-version.js --buildTime ${{ steps.vars.outputs.date }} ; \
          fi
          yarn packager
        shell: bash

      - name: Package for ${{ matrix.os }}-${{ steps.unify.outputs.package-name }} Release üóúÔ∏è
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: 7z a -t7z -mx=9 alphabiz-${{ steps.unify.outputs.package-name }}-${{ steps.vars.outputs.system }}.7z ./build/electron/${{ steps.vars.outputs.package }}

      - name: Pack app üì¶
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          export PATH=$PATH:/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin
          export BUILD_VERSION=${{ steps.unify.outputs.tag-name }}
          yarn make
        shell: bash

      - name: Release alphabiz-${{ steps.unify.outputs.package-name }}-${{ steps.vars.outputs.system }}.7z to GitHub üì∞
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          name: alphabiz-${{ steps.unify.outputs.release-name }}
          tag_name: ${{ steps.unify.outputs.tag-name }}
          body: ${{ env.DESCRIBE }}
          files: |
            alphabiz-${{ steps.unify.outputs.package-name }}-${{ steps.vars.outputs.system }}.7z
            ./out/installers/${{ steps.unify.outputs.build-version }}/**

  appium_test_job:
    needs: nightly_job
    if: |
      (contains(github.event_name, 'schedule') || contains(needs.nightly_job.outputs.output2, '1'))
        && !contains(github.event.head_commit.message, 'skip e2e')
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        test: [1, 2]
        node-version: [14]
        os: [windows-latest]
        include:
          - test: 1
            os: windows-latest
          - test: 2
            os: windows-latest
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
    steps:
      - name: appium_test_job Get short SHA üîë
        run: |
          echo "::set-output name=sha7::${GITHUB_SHA::7}"
          echo "nightly_job"
          echo "isRunAppium: ${{needs.nightly_job.outputs.output2}}"
        shell: bash

      - name: Checkout ‚¨áÔ∏è
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }} üìÆ
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT }}

      - name: update node-gyp on windows to support Visual Studio 2019
        shell: powershell
        run: |
          npm install --global node-gyp@8.4.1
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}

      - name: Get message
        run: |
          git fetch --prune --unshallow
        shell: bash

      - name: Install dependencies üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn

      - name: Install Alphabiz.7z
        run: |
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{needs.nightly_job.outputs.output1}}/alphabiz-${{needs.nightly_job.outputs.output1}}-windows.7z > alphabiz.7z
          7z x alphabiz.7z
        shell: bash

      - name: Install winappdriver.msi
        run: |
          Invoke-WebRequest "https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi" -OutFIle "C:\WindowsApplicationDriver_1.2.1.msi"
          Start-Process msiexec -ArgumentList "/quiet","/x","{087BBF93-D9E3-4D27-BDBE-9C702E0066FC}" -Verb runAs -Wait
          Start-Process msiexec -ArgumentList "/quiet","/i","C:\WindowsApplicationDriver_1.2.1.msi" -Verb runAs -Wait
          Start-Sleep -s 5
        shell: powershell

      - name: Run appium
        run: |
          Start-Process PowerShell -ArgumentList "yarn test:appium"
          Start-Sleep -s 10

      - name: E2E appium creditDownload test for 7z üß™
        if: matrix.test == '1'
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            yarn test:release:creditsDownload

      - name: E2E appium creditUpload test for 7z üß™
        if: matrix.test == '2'
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            yarn test:release:creditsUpload

      - name: Download msi and exe
        run: |
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{needs.nightly_job.outputs.output1}}/alphabiz-${{needs.nightly_job.outputs.output1}}.exe > C:/alphabiz.exe
          curl -L https://github.com/tanshuai/alphabiz/releases/download/${{needs.nightly_job.outputs.output1}}/alphabiz-${{needs.nightly_job.outputs.output1}}.msi > C:/alphabiz.msi
        shell: bash

      - name: Install alphabiz.msi
        run: |
          Start-Process msiexec -ArgumentList "/quiet","/i","C:\alphabiz.msi"
        shell: powershell

      - name: Install alphabiz.exe
        run: |
          Start-Process -FilePath "C:\alphabiz.exe" -Verb runAs -ArgumentList '/s','/v"/qn"'
          Start-Sleep -s 30
        shell: powershell

      - name: E2E appium test for msi üß™
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            export APP_TYPE=msi
            yarn test:release
            unset APP_TYPE

      - name: E2E appium test for exe üß™
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 2
          shell: bash
          retry_on: error
          command: |
            taskkill //F //IM Alphabiz.exe || (echo "app is ready")
            sleep 10s
            export APP_TYPE=exe
            yarn test:release
            unset APP_TYPE

      - name: Upload Test Results üóÉ
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "appium-test-${{ matrix.test }}-output"
          path: test/output/**
